name: Build RPMs

on:
  push:
    branches: ['main']
    tags: ['v*']
  pull_request:
    branches: ['main']

jobs:
  build-rpm:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os_version: [8, 9]
    container:
      image: almalinux:${{ matrix.os_version }}

    steps:
      - name: Enable repositories
        if: matrix.os_version == '9'
        run: |
          dnf update -y
          dnf install -y epel-release
          dnf config-manager --set-enabled crb

      - name: Enable repositories
        if: matrix.os_version == '8'
        run: |
          dnf update -y
          dnf install -y epel-release
          dnf config-manager --set-enabled powertools

      - name: Install build dependencies
        run: |
          dnf install -y \
            autoconf \
            automake \
            gcc \
            git \
            imake \
            make \
            rpm-build \
            rpmdevtools \
            sudo \
            libX11-devel \
            libXmu-devel \
            libXcomposite-devel \
            libXScrnSaver-devel \
            libXrandr-devel \
            libXt-devel \
            libXinerama-devel \
            libXft-devel \
            libXfixes-devel \
            pam-devel \
            fontconfig-devel \
            imlib2-devel \
            libcurl-devel \
            libjpeg-devel \
            libpng-devel \
            libexif-devel \
            wget

      - name: List dir
        run: ls -la

      - name: Git version
        run: git --version

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for git describe
          fetch-tags: true # Fetches all tags

      - name: Test git
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git describe --always --dirty

      - name: Build and install par dependency
        run: |
          # Download and build par
          cd /tmp
          wget http://www.nicemice.net/par/Par-1.53.0.tar.gz
          tar -xzf Par-1.53.0.tar.gz
          cd Par-1.53.0
          # Build par using the recommended flags for GNU/Linux
          make -f protoMakefile CC="gcc -c -ansi -pedantic -O3 -DDONTFREE" LINK1="gcc -s"
          # Install par to /usr/local/bin
          sudo install -m 755 par /usr/local/bin/par
          # Verify installation
          /usr/local/bin/par --version || echo "par installed successfully"

      - name: Make build script executable
        run: chmod +x build-rpm.sh

      - name: Build RPMs
        run: ./build-rpm.sh

      - name: List built RPMs
        run: |
          echo "Built RPM packages:"
          find rpmbuild/RPMS -name "*.rpm" -type f
          ls -la rpmbuild/RPMS/*/*.rpm || true

      - name: Upload RPM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rpm-packages-${{ matrix.os_version }}
          path: rpmbuild/RPMS/*/*.rpm
          retention-days: 30

      - name: Upload SRPM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: srpm-packages-${{ matrix.os_version }}
          path: rpmbuild/SRPMS/*.rpm
          retention-days: 30

      - name: Upload SRPM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tarball-${{ matrix.os_version }}
          path: rpmbuild/SOURCES/xsecurelock*.tar.gz
          retention-days: 30

  # Optional: Create a release if this is a tagged build
  create-release:
    needs: build-rpm
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List file tree
        run: find ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./artifacts/tarball-8/xsecurelock-*-nsls2.tar.gz
            ./artifacts/rpm-packages*/*/*.rpm
            ./artifacts/srpm-packages*/*.rpm
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
